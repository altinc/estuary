/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { AttachmentListRelationFilter } from "../../attachment/base/AttachmentListRelationFilter";
import { ValidateNested, IsOptional, IsEnum } from "class-validator";
import { Type } from "class-transformer";
import { EnumMessageFolder } from "./EnumMessageFolder";
import { StringFilter } from "../../util/StringFilter";
import { RouteWhereUniqueInput } from "../../route/base/RouteWhereUniqueInput";
@InputType()
class MessageWhereInput {
  @ApiProperty({
    required: false,
    type: () => AttachmentListRelationFilter,
  })
  @ValidateNested()
  @Type(() => AttachmentListRelationFilter)
  @IsOptional()
  @Field(() => AttachmentListRelationFilter, {
    nullable: true,
  })
  attachments?: AttachmentListRelationFilter;

  @ApiProperty({
    required: false,
    enum: EnumMessageFolder,
  })
  @IsEnum(EnumMessageFolder)
  @IsOptional()
  @Field(() => EnumMessageFolder, {
    nullable: true,
  })
  folder?: "Inbox" | "Outbox";

  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  id?: StringFilter;

  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  party?: StringFilter;

  @ApiProperty({
    required: false,
    type: () => RouteWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => RouteWhereUniqueInput)
  @IsOptional()
  @Field(() => RouteWhereUniqueInput, {
    nullable: true,
  })
  route?: RouteWhereUniqueInput;
}
export { MessageWhereInput };
